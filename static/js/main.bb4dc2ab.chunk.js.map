{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","code","setCode","isActive","setActive","query","setQuery","url","setUrl","spinnerDefault","spinnerString","Spinner","id","as","animation","size","role","aria-hidden","spinnerDot","setSpinnerDot","useEffect","a","axios","result","obj","Object","entries","map","key","value","console","log","objResult","entry","index","status","errObj","response","errResult","upc","error","headers","fetchData","htmlFor","class","onSubmit","event","preventDefault","test","type","autoFocus","maxLength","placeholder","required","onChange","targetValue","target","Button","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb4dc2ab.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Spinner from 'react-bootstrap/Spinner'\nimport Button from 'react-bootstrap/Button'\n\nfunction App() {\n  const [data, setData] = useState('Enter a 12-digit UPC or 13-digit EAN');\n  const [code, setCode] = useState('');\n  const [isActive, setActive] = useState(false);\n  const [query, setQuery] = useState('');\n  const [url, setUrl] = useState('', );\n  const spinnerDefault = \"Search\";\n  const spinnerString = <Spinner id=\"upcSearchSpinner\" as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\"/>\n  const [spinnerDot, setSpinnerDot] = useState(spinnerDefault);\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    if(/^$/.test(query)){\n      return\n    }\n    if(query === +code){\n      return\n    }\n    //TODO check if query matches previous code\n    setActive(true)\n    setSpinnerDot(spinnerString)\n    setUrl(`https://upc.shamacon.us/off/${query}`)\n    setQuery(\"\")\n  };\n  const handleBarcodeChange = event => {\n    const targetValue = event.target.value\n    if(/^[0-9]+$|^$/.test(targetValue)){\n    setQuery(targetValue)}};\n \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if(url){\n          const result = await axios(url);\n          setActive(false);\n          setSpinnerDot(spinnerDefault)\n          const obj = Object.entries(result.data.result).map(([key, value]) => ({key, value}))\n          console.log(obj);\n          const objResult = obj.map((entry, index) => {\n            console.log(\"here is the entry: \");\n            console.log(entry);\n            return <li id=\"resultMessage\" key={index}>{entry.key}: {entry.value}</li>;\n        });\n          setData(objResult);\n          setCode(result.data.result.code)\n          console.log(\"here is the response: \")\n          console.log(result.status)\n          }\n      } catch (err) {\n        setActive(false);\n        setSpinnerDot(spinnerDefault)\n        const errObj = Object.entries(err.response.data.result).map(([key, value]) => ({key, value}))\n        const errResult = errObj.map((entry, index) => {\n          return <li id=\"errMessage\" key={index}>{entry.key}: {entry.value}</li>;\n        });\n        setData(errResult);\n        setCode(err.response.data.result.upc)\n        console.error(\"Error response:\");\n        console.error(err.response.data.result);    // ***\n        console.log(\"here is the error status\")\n        console.error(err.response.status);  // ***\n        console.error(err.response.headers); // ***\n      } finally {\n      }\n    };\n    fetchData();\n  }, [url]);\n  return (\n    <Fragment>\n      <h1>Enter a barcode number to search for its product name</h1>\n      <label htmlFor='upcSearchForm' class=\"sr-only\" id='upcSearchFormLabel'>UPC Search Form</label>\n      <form\n        id=\"upcSearchForm\"\n        onSubmit={handleSubmit}\n        >\n      <label htmlFor='upcInput' class=\"sr-only\" id='upcInputLabel'>Barcode</label>\n      <input\n        id=\"upcInput\"\n        type=\"text\"\n        autoFocus=\"true\"\n        maxLength=\"13\"\n        value={query}\n        placeholder=\"UPC or EAN-13\"\n        required\n        onChange={handleBarcodeChange}\n      />\n      <label htmlFor='upcSearchSubmit' class=\"sr-only\" id='upcSearchSubmitLabel'>Search for Product Name</label>\n      <Button\n        variant=\"primary\"\n        id=\"upcSearchSubmit\"\n        type=\"submit\"\n      >\n        {isActive && 'Searchingâ€¦'}{spinnerDot}\n      </Button>\n      </form>\n      <ul id='upcResultList'>\n      {data}\n    </ul> \n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}